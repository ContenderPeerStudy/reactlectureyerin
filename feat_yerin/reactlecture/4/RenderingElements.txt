Rending Elements 

이전에 배웠던 createElement 함수는 이름 그대로 엘리멘트를 생성해주는 함수이다. 
엘리멘트의 개념과 역할 그리고 엘리멘트가 렌더링 되는 과정

Elements란? - 어떤 물체를 구성하는 성분 
엘리멘트는 영어 단어는 요소 성분이라는 뜻일 가지고 있다. 
마찬가지로 리엑트의 엘리멘트도 리엑트 앱을 구성하는 요소를 의미
리엑트 공식 홈페이지에서는 엘리멘트를 다음과 같이 정의 
Elements are the smallest building blocks of React apps.
즉, 리엑트 앱을 구성하는 가장 작은 블록들을 엘리먼트라고 부르는 것이다. 
엘리멘트는 원래 웹사이트에 대한 모든 정보를 담고 있는 객체인 DOM에서 사용하는 용어이다. 그래서 기존에는 엘리멘트라고 하면 DOM 엘리멘트를 의미했다. 

리엑트 엘리멘트와 DOM 엘리멘트는 어떤 차이가 있을까
 리엑트가 개발되기 시작한 아주 초창기에 화면에 나타나는 내용을 기술하는 자바스크립트 객체를 일컫는 용어가 필요했습니다. 그래서 처음에는 기술하다라는 describe에서 파생된 describor라는 이름으로 불렀습니다.
하지만 describor가 최종적으로 나타나는 형태는 DOM Element였기 때문에 DOM과의 통일성을 위해서 엘리멘트라고 부르기로 결정했다.


4-2. Elements의 특징 및 렌더링 하기 
    먼저 리엑트 엘리멘트는 굉장히 중요한 특징을 갖고 있는데 바로 불변성입니다. 화면에 보이는 문장에 나와있는 것처럼 리엑트 엘라멘트는 immutable한 특징을 갖고 있습니다. 
    immutable의 단어 뜻은 mutable 변할 수 있는 + im 부정의 의미를 가진 im을 앞에 붙이면 변경할 수 없는, 불변이라는 뜻을 가진 단어이다.
    불변성은 말 그대로 변하지 않는 성질을 의미합니다. 즉,  엘리멘트는 변하지 않는다는 것입니다. 다른 말로 표현하면 엘리멘트 생성 후에는 Children이나 Attributes를 바꿀 수 없다는 말이다. 
    리엑트의 엘리멘트라는 것은 우리 눈에 보이는 것을 기술한다고 했는데 엘리멘트가 변할 수 없다면 화면 갱신이 안되는 것 아닌가? 라는 의문을 가질 수 있습니다. 이러한 의문을 해소하려면 엘리멘트의 불변성에 관한 설명을
    다시 한번 확인해야 한다. 엘리멘트 생성 후에는 Children이나 Attributes를 바꿀 수 없다라고 하였는데 여기서 꼭 인지해야 하는 부분이 "엘리멘트 생성 후에는" 이라는 부분이다. 즉, 엘리멘트는 다양한 모습으로 
    존재할 수 있지만 한번 생성된 다음에는 변경이 불가능하다는 뜻이다. 예를 들어 붕어빵 틀에 반죽을 넣고 시간이 지나면 그 안에서 붕어빵이 구워져 나오는 것을 볼 수 있는데 구워져 나온 붕어빵의 속 내영은 바꿀 수 없는 
    것과 같은 이치라고 생각하면 된다. 그렇다면 화면에 변경된 엘리멘트들을 보여주기 위해서는 어떻게 해야 할까요? 이런 경우에는 기존 엘리멘트를 변경하는 것이 아니라 새로운 엘리멘트를 만들면 된다. 새로운 엘리멘트를 만들어서 
    기존 엘리멘트와 바꿔치기 하는 것이다. 앞에서 리엑트의 장점 중 하나로 빠른 렌더링 속도가 있다. 그리고 이를 위해서 내부적으로 버추얼 돔이라는 것을 사용한다고 했었다
    엘리멘트는 불변성을 갖고 있기 때문에 화면에 새로운 내용을 보여주기 위해서는 새로운 엘리멘트를 만들어 기존 엘리멘트가 연결되어 있는 부분에 바꿔서 달면 된다. 리엑트의 엘리멘트의 불변성이라는 특징을 잘 기억해 두시기 
    바랍니다. 실제로 리엑트를 사용해서 개발하다 보면 상태 관리와 더불어 화면이 얼마나 자주 갱신되는지가 성능에 큰 영향을 미치게 된다. 이 과정에서 엘리멘트가 새롭게 생성된다는 것을 이해하고 있다면 좀 더 원리를 잘 이해하고 
    효율적으로 개발할 수 있습니다. 엘리멘트를 생성한 이후에 실제로 화면에 보여주기 위해서는 렌더링이라는 과정을 거쳐야 합니다. 
    
    <div id="root"> </div>

    이 HTML 코드는 root라는 아이디를 가진 div 코드입니다. 단순한 코드이지만 이 코드는 모든 리엑트 앱에 필수적으로 들어가는 아주 중요한 코드입니다. 실제로 이 div 태그 안에 리엑트 엘리멘트들이 렌덛링되며 이것을 Root DOM Node라고 
    부릅니다. 이 div 태그 안에 있는 모든 것이 리엑트 돔에 의해서 관리되기 때문입니다. 오직 리엑트만으로 만들어진 모든 웹사이트들은 단 하나의 루트 돔 노드를 가지게 됩니다. 반면에 기존에 있던 웹사이트에 추가적으로 리엑트를 연동하게 
    되면 여러 개의 분리된 수많은 루트 돔노드를 가질 수도 있습니다. 

    const element = <h1> 안녕, 리엑트! </h2>;
    ReactDOM.render(element, document.getElementById('root'));

    루트 DIV에 실제로 리엑트 엘리멘트를 렌더링하기 위해서는 다음과 같은 코드를 사용합니다. 이 코드는 먼저 엘리멘트를 하나 생성하고 생성된 엘리멘트를 루트 DIV에 렌더링하는 코드입니다. 렌더링을 위해 리엑트 돔에 렌더라는 함수를
    사용하게 됩니다. 이 함수는 첫번째 파라미터인 React 엘리멘트를 두번쨰 파라미터인 HTML 엘리멘트, 즉 DOM 엘리멘트에 렌더링하는 역할을 합니다. 여기서 다시 한번 React 엘리멘트와 DOM 엘리멘트는 다른 개념이라는 것을 유의! 
    React 엘리멘트는 React의 Virtual DOM에 존재하는 것이고 DOM 엘리멘트는 실제 브라우저의 DOM에 존재하는 것입니다. 
    결국 React 엘리멘트가 렌더링되는 과정은 Virtual DOM에서 실제 DOM으로 이동하는 과정이라고 할 수 있습니다. 그럼 한번 렌더링된 엘리멘트를 업데이트 하려면 어떻게 해야할까? 리엑트 엘리멘트의 중요한 특징을 배웠습니다. 바로 불변성이다
    엘리멘트는 한번 생성되면 바꿀 수 없기 때문에 엘리멘트를 업데이트하기 위해서는 다시 생성해야 한다. 

    function tick() {
        const element = {
            <div> 
                <h1> 안녕, 리엑트! </h1>
                <h2> 현재 시간: {new Date().toLocalTimeString()} </h2>
            </div>
        };
        ReactDOM.render(element, document.getElementById('root'));
    }
    setInterval(tick, 1000);

    이 코드에서는 tick이라는 하수를 정의하고 있습니다. tick 함수는 현재 시간을 포함하고 있는 엘리멘트를 생성하여 root.div에 렌더링하는 역할을 합니다.
    그리고 자바스크립트의 setInterval 함수를 사용해서 tick 함수를 매초 1000ms 마다 호출하고 있습니다. 
    이 코드의 결과는 매초 화면에 사로운 시간이 나오게 될 것입니다. 내부적으로는 tick함수가 호출될 때마다 기존 엘리멘트를 변경하는 것이 아니라 새로운 엘리멘트를 생성해서 바꿔치기 하는 것입니다. 
    리엑트 엘리멘트의 불변성 때문에 엘리멘트는 업데이트하기 위해서는 새로 만들어야 한다는 중요한 사실을 꼭 기억하시기 바랍니다.

    지금까지 배운 내용을 되새기면서 React를 사용하여 이전에 나왔더 ㄴ 
     




