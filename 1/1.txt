1. 리엑트는 무엇인가?
    A JavaScript library for building user interfaces
    사용자 인터페이스를 만들기 위한 자바스크립트 라이브러리가 된다.
    이 문장을 이해하기 위해서는 먼저 라이브러리의 개념에 대해서 알아야 한다. 
    프로그래밍 언어에서의 라이브러리는 도서관이 아닌 자주 사용되는 기능을 
    정리해 모아 놓은 것이라는 의미를 갖고 있다. 프로그래밍 언어에서 
    라이브러리라는 것은 특정 프로그래밍 언어에서 자주 사용되는 기능들을 
    잘 모아서 정리해 놓은 모음집이라고 보면 된다.

    2. 리엑트의 장점과 단점
    리액트의 장점
    리액트의 장점으로 빠른 업데이트와 랜더링 속도를 들 수 있다. 
    여기에서 말하는 업데이트라는 것은 우리가 웹사이트를 탐색할 때 화면에 나타나는 
    내용이 바뀌는 것이라고 생각하면 된다. 만약 메뉴를 누르고 새로운 내용이 
    뜨기까지의 시간이 오래 걸리면 사용자가 기다리지 못하고 나가버릴 수도 있다. 
    그래서 빠른 업데이트는 웹사이트에서 굉장히 중요한 부분 중 하나이다.

    리액트에서는 이러한 빠른 업데이트를 위해 내부적으로 Virtual DOM 이라는 것을 사용한다. 
    Virtual DOM은 말 그대로 가상의 DOM이다. DOM(Document Object Model)의 약자로 
    웹페이지를 정의하는 하나의 객체라고 생각하면 된다. 하나의 웹사이트에 대한 정보를 
    모두 담고 있는 큰 그릇이라고 보면 된다. 크롬 브라우저의 개발자 도구를 열어 콘솔 
    탭에서 document 라고 입력하면 웹페이지의 정보가 모두 담겨 있는 document object 모델입니다. 
    리엑트에서 사용하는 virtual DOM은 그 이름이 가진 의미처럼 가상의 DOM이다. 실제 DOM이 아니다.
    virtual DOM은 웹페이지와 실제 DOM 사이에서 중간 매개체 역할을 하는 것이라고 보면 된다.

    일반적으로 DOM이 웹사이트 정보를 모두 담고 있어서 화면이 업데이트 된다는 말은 
    곧 DOM이 수정된다는 말과 동일하다. 기존의 방식으로 화면을 업데이트 하려면 DOM을 직접 수정해야 
    하는데 이것은 성능에 영향을 크게 미치고 비용도 굉장히 많이 드는 작업이다.
    왜냐하면 수정할 부분을 DOM의 데이터에서 모두 찾아야하기 때문이다. 반면에 리엑트는 DOM을 직접 
    수정하는 것이 아니라 업데이트해야 할 최소한의 부분만을 찾아서 업데이트한다. 이 그림에서 보이는 
    것처럼 어떤 상태의 변경, 스테이트 체인지가 일어나면 Virtual DOM에서는 업데이트해야 될 초소한의 
    부분을 검색, 컴퓨트 딥한다. 그리고 검색된 부분만을 업데이트하고 다시 렌더링하면서 변경된 내용을 
    빠르게 사용자에게 보여줄 수 있는 것이다.

    리액트의 두번째 장점으로는 컴표넌트 기반(Componenet-Based)의 구조를 들 수 있다. 
    리액트에는 컴포넌트라는 굉장히 중요한 개념이 있다. 컴포넌트는 구성요소라는 뜻을 가지고 있는데 
    리액트에서는 모든 페이지가 컴포넌트로 구성되어 있고 하나의 컴포넌트는 또 다른 여러 개의 컴포넌트의 
    조합으로 구성될 수 있다. 마치 레고블록 조립하듯 컴포넌트들을 모아서 개발 그래서 리엑트로 개발하다 
    보면 레고 블록을 조립하는 것처럼 컴포넌트를 조합해서 웹사이트를 개발하게 된다.
    재사용성(Reusability)은 객체지향 프로그래밍을 배울 때 등장하는 개념인데 소프트웨어 개발에 있어서 
    굉장히 중요한 개념이다. 재사용성은 말 그대로 다시 사용이 가능한 성질을 의미한다. 
    재활용과 재사용이 같은말이 아니냐라고 생각할 수도 있지만 재활용은 다시 활용이 가능한 자원을 
    가공하여 새로운 제품을 만드는 것이고 재사용은 계속해서 다시 사용이 가능한 성질을 말한다. 
    물리적인 물질은 쓰면 쓸수록 닳기 때문에 기본적으로 재사용이 불가능하다. 
    그래서 재사용이라는 개념은 소프트웨어 분야에서만 주로 쓰인다. 하지만 모든 소프트웨어가
    곧바로 어떤 곳에서든 재사용이 가능하지는 않는다.

    예를 들어 이 그림처럼 A라는 프로그램에서 쓰던 캘린더라는 모듈을 B라는 프로그램에 적용하려고 했더니
    캘린더 모듈은 데이트 모듈에 의존성이 있어서 데이트 모듈 없이는 독립적으로 재사용이 불가능하다. 
    하지만 스트링 모듈의 경우 다른 모듈의 의존성이 없기 때문에 독립적으로 재사용이 가능하다. 재사용을 
    하려고 할 때 의존성 문제 말고도 여러가지 호환성 문제가 발생할 수도 있다. 그래서 소프트웨어를 개발할 
    때 재사용성이 높게 개발해야 한다고 하는데 이 말은 해당 소프트웨어 또는 모듈이 다른 것에도 쉽게 
    곧바로 쓸 수 있도록 개발하는 것을 의미한다. 다른 모듈의 의존성을 낮추고 호환성 문제가 발생하지 않도록 
    개발해야 한다는 의미이기도 한다.

    그렇다면 재사용성이 높아졌을때의 장점은 먼저 전체 소프트웨어의 개발 기간이 단축이 된다. 
    비슷한 소프트웨어를 개발한다고 할 때 기존에 개발해둔 모듈을 곧바로 재사용하여 개발하면 되기 
    때문에 개발 기간을 굉장히 많이 줄일 수 있다. 재사용성이 높아지는 것의 두번째 장점은 유지보수가 
    용이하다는 것이다. 만약 여러 소프트웨어에서 공통으로 사용하는 모듈에 문제가 생기면 해당 모듈만 
    수정해서 다시 배포하면 되기 때문이다. 또한 소프트웨어를 개발하다 보면 예상치 못한 버그를 마주치는 
    상황이 번번하게 발생하게 되는데 이런 경우 재사용성이 높은 형태로 개발되어 있다면 좀 더 버그의 원인을 
    찾기 쉽다. 왜냐하면 재사용성이 높다는 것은 여러 모듈 간의 의존성이 낮다는 뜻이기 때문이다. 
    그래서 각 부분들이 잘 분리되어 있고 쉽게 버그를 찾아서 수정할 수 있다. 여기서 언급한 부분 이외에도 
    재사용성의 장점은 많다.

    -리액트와 재사용성의 연관성
    리액트는 컴포넌트 기반의 구조로 되어있다. 이러한 각 컴포넌트들은 웹사이트의 여러곳에서 
    반복적으로 사용될 수 있다. 이말은 곧 하나의 컴포넌트가 계속해서 재사용될 수 있다는 말이다. 
    그래서 리액트 컴포넌트를 개발할 때 항상 쉽고 재사용 가능한 형태로 개발하는 것이 중요하다. 
    그렇게 하면 나중에 다른 웹사이트도 쉽고 빠르게 개발이 가능하기 때문이다.

    리액트의 가장 큰 장점이자 현재의 영향력을 가지게 된 이유로 개발 생태계와 커뮤니티를 꼽을 수 있다. 
    어떤 새로운 기술이 등장하는 초창기에는 해당 기술을 처음 사용하다가 어느 순간 막히는 부분이 생긴다.
    이러한 경우 답을 찾기 위해 여러가지 방법을 시도해보게 되는데 개발 생태계와 커뮤니티가 잘 갖춰져 있지 
    않으면 원하는 답을 얻기가 생각보다 많이 힘들다. 그런 점에서 활발한 지식 공유와 활성화된 커뮤니티는 
    리액트의 굉장히 큰 장점이자 중요한 부분이다. 또 하나의 장점으로는 리액트를 배운 이후 리액트 
    네이티브라는 모바일 환경 UI 프레임웍을 사용해서 모바일 앱도 개발할 수 있다는 것이다. 보통 모바일 앱을 
    개발하기 위해 안드로이드 앱의 경우 Kotlin이라는 프로그래밍 언어를 배워야 하고 iOS앱은 Swift라는 
    별도의 프로그래밍 언어를 배워야 한다. 프로그래밍 언어 뿐 아니라 각각의 개발 프레임워크에 대해서도 
    학습을 해야한다. 그래서 처음으로 모바일 앱 개발을 하려는 개발자에게는 진입 장벽이 높게 느껴질 수 
    있지만 리액트 네이티브를 사용하면 자바스크립트로 한번 코딩을 해서 안드로이드 앱과 iOS 앱을 동시에 
    만들 수 있다. 물론 네이티브 앱보다 성능이나 속도 면에서 조금 부족한 부분을 보일 수 있지만 간단한 
    수준의 앱은 사용자가 차이점을 느끼지 못할 정도로 개발할 수 있다.

    리액트의 단점
    첫번째 단점으로는 방대한 학습량이 있다. 모든 라이브러리가 그렇지만 특히 리액트의 경우 기존과는 다른 
    방식의 UI 라이브러리이기 때문에 학습해야할 것들이 많다. Virtual DOM, JSX, Component State Props 등 
    새로운 개념들이 굉장히 많이 등장한다. 그리고 특정 기술을 한번 배웠다고 끝나는 것이 아닌 바뀌는 부분에 
    대해서도 꾸준히 공부해야한다. 또다른 단점으로는 높은 상태관리 복잡도를 들 수 있다. 
    state라는 개념이 등장하는데 쉽게 말해 리액트 컴포넌트의 상태를 의미 앞에서 Virtual DOM을 설명할 때 
    바뀐 부분만을 찾아서 업데이트 한다. 여기서 바뀐 부분이라는 것은 state가 바뀐 컴포넌트를 의미 따라서 
    state는 리액트에서 굉장히 중요한 역할을 담당하고 있다고 할 수 있다. 성능 최적화를 위해 이 state를 
    잘 관리하는 것이 중요한데 처음엔 생각만큼 쉽지 않을 수 있다. 익숙해지더라도 웹사이트의 규모가 커져 
    컴포넌트의 갯수가 많아지면 상태 관리의 복잡도도 증가한다. 그래서 보통 큰 규모의 프로젝트의 경우 상태
    관리를 위해서 리덕스, 보백스, 그리고 리코일 같은 외부 상태관리 라이브러리를 사용하는 경우가 많다. 
    상태 관리의 기본 개념을 제대로 이해하자!
